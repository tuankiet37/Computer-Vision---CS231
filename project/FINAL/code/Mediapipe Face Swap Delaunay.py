# -*- coding: utf-8 -*-
"""media_utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OpBOgNHQvqWM7AlU7RUc4WHfRaRQn9oA
"""

!pip install mediapipe

import sys

import cv2
import mediapipe as mp
import numpy as np

from google.colab.patches import cv2_imshow

mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_face_mesh = mp.solutions.face_mesh

def get_landmark_points(src_image):
    with mp_face_mesh.FaceMesh(
            static_image_mode=True,
            max_num_faces=1,
            refine_landmarks=True,
            min_detection_confidence=0.5) as face_mesh:
        # Convert the BGR image to RGB before processing.
        results = face_mesh.process(cv2.cvtColor(src_image, cv2.COLOR_BGR2RGB))

        # Print and draw face mesh landmarks on the image.
        if not results.multi_face_landmarks:
            return None
        if len(results.multi_face_landmarks) > 1:
            sys.exit("There are too much face landmarks")
        # annotated_image = src_image.copy()
        # for face_landmarks in results.multi_face_landmarks:
        #   print('face_landmarks:', face_landmarks)
        #   mp_drawing.draw_landmarks(
        #       image=annotated_image,
        #       landmark_list=face_landmarks,
        #       connections=mp_face_mesh.FACEMESH_TESSELATION,
        #       landmark_drawing_spec=None,
        #       connection_drawing_spec=mp_drawing_styles
        #       .get_default_face_mesh_tesselation_style())
        #   mp_drawing.draw_landmarks(
        #       image=annotated_image,
        #       landmark_list=face_landmarks,
        #       connections=mp_face_mesh.FACEMESH_CONTOURS,
        #       landmark_drawing_spec=None,
        #       connection_drawing_spec=mp_drawing_styles
        #       .get_default_face_mesh_contours_style())
        #   mp_drawing.draw_landmarks(
        #       image=annotated_image,
        #       landmark_list=face_landmarks,
        #       connections=mp_face_mesh.FACEMESH_IRISES,
        #       landmark_drawing_spec=None,
        #       connection_drawing_spec=mp_drawing_styles
        #       .get_default_face_mesh_iris_connections_style())
        # cv2.imwrite('annotated_image' + '.png', annotated_image)
        src_face_landmark = results.multi_face_landmarks[0].landmark
        landmark_points = []
        for i in range(468):
            y = int(src_face_landmark[i].y * src_image.shape[0])
            x = int(src_face_landmark[i].x * src_image.shape[1])
            landmark_points.append((x, y))

        return landmark_points

def extract_index_nparray(nparray):
    index = None
    for num in nparray[0]:
        index = num
        break
    return index

def get_triangles(convexhull, landmarks_points, np_points):
    rect = cv2.boundingRect(convexhull) # trả về (x,y,w,h)
    subdiv = cv2.Subdiv2D(rect) # tạo 1 không gian trống Delaunay subdivision
    subdiv.insert(landmarks_points) # bỏ những điểm landmarks vào không gian
    triangles = subdiv.getTriangleList() # trả về 1 danh sách các điểm tam giác
    triangles = np.array(triangles, dtype=np.int32)
    # print(triangles)
    indexes_triangles = []
    for t in triangles:
        pt1 = (t[0], t[1]) #điểm thứ nhất
        pt2 = (t[2], t[3]) #điểm thứ 2
        pt3 = (t[4], t[5]) #điểm thứ 3

        index_pt1 = np.where((np_points == pt1).all(axis=1))[0][0]
        #index_pt1 = extract_index_nparray(index_pt1)
        index_pt2 = np.where((np_points == pt2).all(axis=1))[0][0]
        # index_pt2 = extract_index_nparray(index_pt2)
        index_pt3 = np.where((np_points == pt3).all(axis=1))[0][0]
        # index_pt3 = extract_index_nparray(index_pt3)

        if index_pt1 is not None and index_pt2 is not None and index_pt3 is not None:
            triangle = [index_pt1, index_pt2, index_pt3]
            indexes_triangles.append(triangle)
    return indexes_triangles

def triangulation(triangle_index, landmark_points, img=None):
    tr1_pt1 = landmark_points[triangle_index[0]]
    tr1_pt2 = landmark_points[triangle_index[1]]
    tr1_pt3 = landmark_points[triangle_index[2]]
    triangle = np.array([tr1_pt1, tr1_pt2, tr1_pt3], np.int32) # lấy ra 3 điểm tam giác landmark

    rect = cv2.boundingRect(triangle) #tìm hình chữ nhật bao quanh tam giác
    (x, y, w, h) = rect

    cropped_triangle = None
    if img is not None:
        cropped_triangle = img[y: y + h, x: x + w] # cắt ra hình chữ nhật
    
    cropped_triangle_mask = np.zeros((h, w), np.uint8) # tạo mask

    points = np.array([[tr1_pt1[0] - x, tr1_pt1[1] - y],
                       [tr1_pt2[0] - x, tr1_pt2[1] - y],
                       [tr1_pt3[0] - x, tr1_pt3[1] - y]], np.int32)
    # print(x,y)
    # print(tr1_pt1,tr1_pt2,tr1_pt3)
    # print(points)
    cv2.fillConvexPoly(cropped_triangle_mask, points, 255) # vẽ 1 tam giác đặc

    return points, cropped_triangle, cropped_triangle_mask, rect

def warp_triangle(rect, points1, points2, src_cropped_triangle, dest_cropped_triangle_mask):
    (x, y, w, h) = rect
    # print("src_cropped:")
    # cv2_imshow(src_cropped_triangle)
    matrix = cv2.getAffineTransform(np.float32(points1), np.float32(points2)) # trả về matrix chứa rotation, scale, translation
    warped_triangle = cv2.warpAffine(src_cropped_triangle, matrix, (w, h)) # áp dụng affine lên ảnh crop
    # print("warped before:")
    # cv2_imshow(warped_triangle)
    warped_triangle = cv2.bitwise_and(warped_triangle, warped_triangle, mask=dest_cropped_triangle_mask) 
    # print("warped later")
    # cv2_imshow(warped_triangle)
    return warped_triangle

def add_piece_of_new_face(new_face, rect, warped_triangle):
    (x, y, w, h) = rect
    # print("warped before:")
    # cv2_imshow(warped_triangle)

    new_face_rect_area = new_face[y: y + h, x: x + w]
    new_face_rect_area_gray = cv2.cvtColor(new_face_rect_area, cv2.COLOR_BGR2GRAY)
    # print("new_face_rect_area:")
    # cv2_imshow(new_face_rect_area)
    _, mask_triangles_designed = cv2.threshold(new_face_rect_area_gray, 1, 255, cv2.THRESH_BINARY_INV)
    # print("Mask:")
    # cv2_imshow(mask_triangles_designed)
    warped_triangle = cv2.bitwise_and(warped_triangle, warped_triangle, mask=mask_triangles_designed)
    # print("warped later")
    # cv2_imshow(warped_triangle)

    new_face_rect_area = cv2.add(new_face_rect_area, warped_triangle)
    new_face[y: y + h, x: x + w] = new_face_rect_area

def swap_new_face(dest_image, dest_image_gray, dest_convexHull, new_face):
    face_mask = np.zeros_like(dest_image_gray)
    head_mask = cv2.fillConvexPoly(face_mask, dest_convexHull, 255)
    # print("head_mask")
    # cv2_imshow(head_mask)
    face_mask = cv2.bitwise_not(head_mask)
    # print("face_mask")
    # cv2_imshow(face_mask)

    head_without_face = cv2.bitwise_and(dest_image, dest_image, mask=face_mask)
    # print("head_without_face")
    # cv2_imshow(head_without_face)

    result = cv2.add(head_without_face, new_face)
    # print("result")
    # cv2_imshow(result)
    # result = cv2.add(dest_image, new_face)

    (x, y, w, h) = cv2.boundingRect(dest_convexHull)
    center_face = (int((x + x + w) / 2), int((y + y + h) / 2))

    return cv2.seamlessClone(result, dest_image, head_mask, center_face, cv2.NORMAL_CLONE)

def set_src_image(image):
    global src_image, src_image_gray, src_mask, src_landmark_points, src_np_points, src_convexHull, indexes_triangles
    src_image = image
    src_image_gray = cv2.cvtColor(src_image, cv2.COLOR_BGR2GRAY)
    src_mask = np.zeros_like(src_image_gray)

    src_landmark_points = get_landmark_points(src_image)
    src_np_points = np.array(src_landmark_points)
    src_convexHull = cv2.convexHull(src_np_points) #trả về điểm ngoài nhất
    # print(src_convexHull)
    # cv2.polylines(src_image, [src_convexHull], True, (255,0,0),1)
    # cv2_imshow(src_image)
    cv2.fillConvexPoly(src_mask, src_convexHull, 255) #vẽ đa giác đặc
    # cv2_imshow(src_mask)
    indexes_triangles = get_triangles(convexhull=src_convexHull,
                                                  landmarks_points=src_landmark_points,
                                                  np_points=src_np_points)

img = cv2.imread('a.png')

set_src_image(img)

width, height, _ = img.shape
#cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
cap = cv2.VideoCapture("jonbe.mp4")
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))

size = (frame_width, frame_height)
output = cv2.VideoWriter('output.avi',
                         cv2.VideoWriter_fourcc(*'XVID'),
                         24, size)
while cap.isOpened:
    global src_image, src_image_gray, src_mask, src_landmark_points, src_np_points, src_convexHull, indexes_triangles

    ret, dest_image = cap.read()
    if not ret:
      break
    # dest_image = cv2.resize(dest_image, (width, height))

    dest_image_gray = cv2.cvtColor(dest_image, cv2.COLOR_BGR2GRAY)
    dest_mask = np.zeros_like(dest_image_gray)

    dest_landmark_points = get_landmark_points(dest_image)
    if dest_landmark_points is None:
        continue
    dest_np_points = np.array(dest_landmark_points)
    dest_convexHull = cv2.convexHull(dest_np_points)

    height, width, channels = dest_image.shape
    new_face = np.zeros((height, width, channels), np.uint8)

    # Triangulation of both faces
    for triangle_index in indexes_triangles:
        # Triangulation of the first face
        points, src_cropped_triangle, cropped_triangle_mask, _ = triangulation(
            triangle_index=triangle_index,
            landmark_points=src_landmark_points,
            img=src_image)
        
        # print('src_crop:')
        # cv2_imshow(src_cropped_triangle)
        # print('src_crop_mask:')
        # cv2_imshow(cropped_triangle_mask)
        # Triangulation of second face
        points2, _, dest_cropped_triangle_mask, rect = triangulation(triangle_index=triangle_index,
                                                                                 landmark_points=dest_landmark_points)
        # print('des_crop_mask:')
        # cv2_imshow(dest_cropped_triangle_mask)
        # Warp triangles
        warped_triangle = warp_triangle(rect=rect, points1=points, points2=points2,
                                                    src_cropped_triangle=src_cropped_triangle,
                                                    dest_cropped_triangle_mask=dest_cropped_triangle_mask)
        # cv2_imshow(warped_triangle)
        # Reconstructing destination face
        add_piece_of_new_face(new_face=new_face, rect=rect, warped_triangle=warped_triangle)

    # Face swapped (putting 1st face into 2nd face)
    # new_face = cv2.medianBlur(new_face, 3)
    result = swap_new_face(dest_image=dest_image, dest_image_gray=dest_image_gray,
                                       dest_convexHull=dest_convexHull, new_face=new_face)
    
    # cv2_imshow(result)
    result = cv2.medianBlur(result, 3)
    h, w, _ = src_image.shape
    rate = width / w
    # cv2_imshow(cv2.resize(src_image, (int(w * rate), int(h * rate))))
    # cv2_imshow(new_face)
    #cv2_imshow(result)
    output.write(result)
    # # Keyboard input
    # key = cv2.waitKey(3)
    # # ESC
    # if key == 27:
    #     break
    # # Source image change
    # if ord("0") <= key <= ord("9"):
    #     num = int(chr(key))
    #     if num < len(src_images):
    #         set_src_image(src_images[num])

cap.release()
cv2.destroyAllWindows()